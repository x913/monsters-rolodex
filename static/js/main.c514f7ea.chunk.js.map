{"version":3,"sources":["components/Card/card.component.jsx","components/CardList/card-list.component.jsx","components/SearchBox/SearchBox-component.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Card","props","monster","className","key","id","alt","src","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","onSortClick","setState","state","sort","a","b","localeCompare","onChangeClick","message","onSearchBoxChange","e","searchField","target","value","toLowerCase","handleChanges","fetch","then","response","json","data","this","filtered","filter","includes","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"kPAGaA,G,kBAAO,SAACC,GAAW,IACpBC,EAAYD,EAAZC,QACR,OACI,yBAAKC,UAAU,iBAAiBC,IAAKF,EAAQG,IACzC,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BL,EAAQG,GAAlC,4BACtB,4BAAMH,EAAQM,MACd,2BAAIN,EAAQO,UCLXC,G,MAAW,SAACT,GAAW,IACxBU,EAAaV,EAAbU,SACR,OACI,yBAAKR,UAAU,aACVQ,EAASC,KAAI,SAAAV,GAAO,OAAI,kBAAC,EAAD,CAAME,IAAKF,EAAQG,GAAIH,QAASA,UCLxDW,G,aAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OAAQ,2BAAOC,KAAK,SAASb,UAAU,SAASW,YAAaA,EAAaG,SAAUF,MC4DzEG,E,YApDb,aAAe,IAAD,8BAEZ,+CAgBFC,YAAc,WACZ,EAAKC,SAAS,CAAET,SAAU,EAAKU,MAAMV,SAASW,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEf,KAAKiB,cAAcD,EAAEhB,YAnBxE,EAsBdkB,cAAgB,WAEd,EAAKN,SAAS,CAAEO,QAAS,eAxBb,EA2BdC,kBAAoB,SAACC,GACnB,EAAKT,SAAS,CAAEU,YAAaD,EAAEE,OAAOC,MAAMC,iBA5BhC,EA+BdC,cAAgB,SAACL,GACf,EAAKT,SAAS,CAAEU,YAAaD,EAAEE,OAAOC,MAAMC,iBA7B5C,EAAKZ,MAAQ,CACXV,SAAU,GACVmB,YAAa,IALH,E,iFAYO,IAAD,OAClBK,MAAM,6CAA6CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GACxF,EAAKnB,SAAS,CAAET,SAAU4B,S,+BAqBpB,IAAD,EAC2BC,KAAKnB,MAA/BV,EADD,EACCA,SAAUmB,EADX,EACWA,YACZW,EAAW9B,EAAS+B,QAAO,SAAAnB,GAAC,OAAIA,EAAEf,KAAKyB,cAAcU,SAASb,MAGpE,OACE,yBAAK3B,UAAU,OACb,gDACA,2BAAG,kBAAC,EAAD,CAAWY,aAAcyB,KAAKN,cAAepB,YAAY,oBAC5D,kBAAC,EAAD,CAAUH,SAAU8B,IAEpB,4BAAQG,QAASJ,KAAKrB,aAAtB,qB,GAhDU0B,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.c514f7ea.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n    const { monster } = props;\r\n    return (\r\n        <div className='card-container' key={monster.id}>\r\n            <img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} />\r\n            <h2 >{monster.name}</h2>\r\n            <p>{monster.email}</p>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport { Card } from './../Card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => {\r\n    const { monsters } = props;\r\n    return (\r\n        <div className=\"card-list\">\r\n            {monsters.map(monster => <Card key={monster.id} monster={monster} />)}\r\n        </div>)\r\n}","import React, { Component } from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n    return (<input type='search' className='search' placeholder={placeholder} onChange={handleChange} />);\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/CardList/card-list.component';\nimport { Card } from './components/Card/card.component';\nimport { thisExpression, anyTypeAnnotation } from '@babel/types';\nimport { SearchBox } from './components/SearchBox/SearchBox-component';\n\n// By using class we gather access to the \"state\" - JS object with properties\n\nclass App extends Component {\n\n  constructor() {\n    // call the constructor method on the Component class\n    super();\n    this.state = {\n      monsters: [],\n      searchField: '',\n    }\n    // this.handleChanges = this.handleChanges.bind(this);\n  }\n\n\n  // life cycle methods gets called automatically by react at different stages of app when component gets rendered\n  componentDidMount() {\n    fetch('http://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => {\n      this.setState({ monsters: data });\n    });\n  }\n\n  onSortClick = () => {\n    this.setState({ monsters: this.state.monsters.sort((a, b) => a.name.localeCompare(b.name)) });\n  }\n\n  onChangeClick = () => {\n    // you never modify state directly, only with setState because of unidirectional dataflow\n    this.setState({ message: 'not empty' });\n  }\n\n  onSearchBoxChange = (e) => {\n    this.setState({ searchField: e.target.value.toLowerCase() });\n  }\n\n  handleChanges = (e) => {\n    this.setState({ searchField: e.target.value.toLowerCase() });\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filtered = monsters.filter(a => a.name.toLowerCase().includes(searchField));\n\n    // whis code is actually an JSX, not HTML, and JSX mimics as HTML\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <p><SearchBox handleChange={this.handleChanges} placeholder='Search monster' /></p>\n        <CardList monsters={filtered}>\n        </CardList>\n        <button onClick={this.onSortClick}>Sort by name</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n// render DOM in browser\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}